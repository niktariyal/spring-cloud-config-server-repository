server:
  port: 8184
  servlet:
    context-path: /elastic-query-web-client

elastic-query-web-client:
  webclient:
    connect-timeout-ms: 10000
    read-timeout-ms: 10000
    write-timeout-ms: 10000
    max-in-memory-size: 10485760  # 10MB
    content-type: 'application/json'   # 'application/vnd.api.v1+json'
    accept-type: 'application/json'   # 'application/vnd.api.v1+json'
#    base-url: 'http://localhost:8183/elastic-query-service/documents'
    base-url: 'http://elastic-query-service/elastic-query-service/documents'
#    service-id: elastic-query-service
#    instances:       #Removing serviceId and instances variables here as using springcloud euraka loadbalancing
#      -
#        id: elastic-query-service-1
#        host: localhost
#        port: 8183
#      -
#        id: elastic-query-service-2
#        host: localhost
#        port: 8185
  query-by-text:
    method: POST
    uri: "/get-document-by-text"
    accept: ${elastic-query-web-client.webclient.accept-type}

spring:
  cloud:
    loadbalancer:
      ribbon:
        enabled: false    #to work with spring cloud loadbalancer
  thymeleaf:
    cache: false
  security:
    oauth2:
      client:
        registration:
          keycloak:
            client-id: 'elastic-query-web-client'
#            client-secret: '61a0599f-c0cd-4262-9748-28c7bdf68df3'
            client-secret: '{cipher}824de5f7c6541318c4902f8d5aaa947e38a55ebcb0c36f210a7a4f950bb4e4422c087a7a09a78ccca896e46f386f40bf7940087f7cf33a71f781c0aeaa7f4d3e'
            authorization-grant-type: authorization_code
            redirect-uri: '{baseUrl}/login/oauth2/code/{registrationId}'
            scope: openid
        provider:
          keycloak:
            issuerUri: http://localhost:8081/auth/realms/microservices_realm

security:
  logout-success-url: http://localhost:8184/elastic-query-web-client
  default-client-registration-id: keycloak

user-config:
  username: test
  password: '{cipher}16135d09fb0d5e3e7af6e87ac47603ad1c07cac7e61820fe0eee0be2a6a08df0'
  roles: USER